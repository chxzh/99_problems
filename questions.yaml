- Lists:
    - find the last: # question title
        - Find the last element of a list # question description
        - "[1,2,3,4]" # example input
        - 4 # example output
    - find the last but one:
        - Find the last but one element of a list
        - "[1,2,3,4]"
        - 3
    - find the kth:
        - Find the Kth element of a list. The first element in the list is number 1
        - "[1,2,3,4], 2"
        - 2
    - find the number:
        - Find the number of elements of a list
        - "[123, 1234, 12]"
        - 3
    - reverse:
        - Reverse a list/string
        - "'A man, a plan, a canal, panama!'"
        - "'!amanap ,lanac a ,nalp a ,nam A'"
    - check palindrome:
        - Find out whether a list is a palindrome. A palindrome can be read forward or backward
        - "'madamimadam'"
        - "true"
    - flatten:
        - Flatten a nested list structure. Transform a list, possibly holding lists as elements into a `flat' list by replacing each list with its elements (recursively).
        - "[a,[b,[c,d],e]]"
        - "[a,b,c,d,e]"
    - deduplicate:
        - Eliminate consecutive duplicates of list elements. If a list contains repeated elements they should be replaced with a single copy of the element. The order of the elements should not be changed.
        - "[a,a,a,a,b,c,c,a,a,d,e,e,e,e]"
        - "[a,b,c,a,d,e]"
    - pack dupilicates:
        - Pack consecutive duplicates of list elements into sublists. If a list contains repeated elements they should be placed in separate sublists
        - "[a,a,a,a,b,c,c,a,a,d,e,e,e,e]"
        - "[[a,a,a,a],[b],[c,c],[a,a],[d],[e,e,e,e]]"
    - count dupilicates:
        - Run-length encoding of a list. Use the result of problem P09 to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.
        - "[a,a,a,a,b,c,c,a,a,d,e,e,e,e]"
        - "[(4,a),(1,b),(2,c),(2,a),(1,d),(4,e)]"
- Lists, continued:
- Lists again:
- Arithmetic:
- Logic and codes:
- Binary trees:
- Binart trees, continued:
- Multiway trees:
- Graphs:
- Miscellaneous problems:
- Miscellaneous problems, continued:
